from .models import User
from django.shortcuts import render, redirect
from django.http.response import HttpResponse
from django.contrib.auth import authenticate, login
from django.urls import reverse
from django.http import HttpResponseRedirect, JsonResponse
from pymongo import MongoClient
import fasttext
import numpy as np
import nltk
from nltk.corpus import stopwords as sw
from nltk.tokenize import word_tokenize
from nltk.stem import PorterStemmer
from sklearn.metrics.pairwise import cosine_similarity
from transformers import AutoTokenizer, AutoModel
import os
import pickle
from django.views.decorators.csrf import csrf_exempt
import json
import string
import torch
import ast

client = MongoClient('mongodb://localhost:27017/')
db = client['article_vectors']
collection = db['vectors']
nltk.download('stopwords')
nltk.download('punkt')  

abstracts = []
folder_path = 'Inspec/docsutf8'
for file_name in os.listdir(folder_path):
    if file_name.endswith('.txt'):
        with open(os.path.join(folder_path, file_name), 'r', encoding='utf-8') as file:
            abstract = file.read()
            abstracts.append(abstract)


def index(request):
    return render(request, 'login.html')

def main_page(request):
    if request.user:
        contents = []
        interests = request.user.interests
        interests = interests[0]
        interests = ast.literal_eval(interests)
        
        with open('fasttext_vectors.pkl', 'rb') as f:
            fasttext_vectors = pickle.load(f)

        for interest in interests:
            interest = pre_process(interest)
            interest = ' '.join(interest)
        fasttext_model = fasttext.load_model('wiki.en.bin')
        fasttext_interest_vectors = [fasttext_model.get_word_vector(word) for word in interests if word in fasttext_model.words]
        fasttext_interest_vectors = np.array(fasttext_interest_vectors)
       
        recommendations = []
        abstract_vectors = np.array(fasttext_vectors)


        for i, abstract_vector in enumerate(abstract_vectors):
            if abstract_vector.any():
                abstract_vector = np.expand_dims(abstract_vector, axis=0)
                similarities = cosine_similarity(fasttext_interest_vectors, abstract_vector)
                for j, similarity in enumerate(similarities):
                    recommendations.append((i, similarity[0]))

        recommendations.sort(key=lambda x: x[1], reverse=True)
        fasttext_recommendations = recommendations[:5]

        for idx, similarity in fasttext_recommendations:
            recommendation = abstracts[idx]
            content = {}
            upper_case_indices = [i for i, c in enumerate(recommendation) if c.isupper()]
            if len(upper_case_indices) >= 2:
                title_end_index = upper_case_indices[1]
                title = recommendation[:title_end_index]
                recommendation = recommendation[title_end_index:]
                content["title"] = title
                content["abstract"] = recommendation
                content["similarity"] = similarity
                
                contents.append(content)


        with open('scibert_vectors.pkl', 'rb') as f:
            scibert_vectors = pickle.load(f)
        
        scibert_interest_vectors = [get_scibert_vector(word) for word in interests]
        recommendations = []
        scibert_interest_vectors = np.vstack(scibert_interest_vectors)
        abstract_vectors = np.array(scibert_vectors)

        for i, abstract_vector in enumerate(abstract_vectors):
            if abstract_vector.any():
                abstract_vector = np.expand_dims(abstract_vector, axis=0)
                similarities = cosine_similarity(scibert_interest_vectors, abstract_vector)
                for j, similarity in enumerate(similarities):
                    recommendations.append((i, similarity[0]))
        
        recommendations.sort(key=lambda x: x[1], reverse=True)
        scibert_recommendations = recommendations[:5]

        for idx, similarity in scibert_recommendations:
            recommendation = abstracts[idx]
            content = {}
            upper_case_indices = [i for i, c in enumerate(recommendation) if c.isupper()]
            if len(upper_case_indices) >= 2:
                title_end_index = upper_case_indices[1]
                title = recommendation[:title_end_index]
                recommendation = recommendation[title_end_index:]
                content["title"] = title
                content["abstract"] = recommendation
                content["similarity"] = similarity
                
                contents.append(content)

        return render(request, 'article_page.html', {'articles': contents})

def updating_recommendations(request):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            fasttext_recommendations = data.get('fasttext_recommendations', [])
            scibert_recommendations = data.get('scibert_recommendations', [])

            # FastText işlemleri
            new_fasttext_recommendations = []
            fasttext_vectors = []

            with open('fasttext_vectors.pkl', 'rb') as f:
                abstract_vectors = pickle.load(f)
            abstract_vectors = np.array(abstract_vectors)
            fasttext_model = fasttext.load_model('wiki.en.bin')
            interests = request.user.interests
            interests = interests[0]
            interests = ast.literal_eval(interests)
            interest_vectors = [fasttext_model.get_word_vector(word) for word in interests if word in fasttext_model.words]
            interest_vectors = np.array(interest_vectors)

            for text in fasttext_recommendations:
                abstract = pre_process(text)
                abstract_vector = [fasttext_model.get_word_vector(word) for word in abstract if word in fasttext_model.words]
                if abstract_vector:
                    fasttext_vectors.append(sum(abstract_vector) / len(abstract_vector))
                else:
                    fasttext_vectors.append([])

            fasttext_vectors = np.array(fasttext_vectors)

            if fasttext_vectors.shape != interest_vectors.shape:
                min_shape = min(fasttext_vectors.shape[0], interest_vectors.shape[0])
                fasttext_vectors = fasttext_vectors[:min_shape, :]
                interest_vectors = interest_vectors[:min_shape, :]

            new_fasttext_vectors = np.mean(fasttext_vectors + interest_vectors, axis=0)

            for i, abstract_vector in enumerate(abstract_vectors):
                if abstract_vector.any():
                    abstract_vector = np.expand_dims(abstract_vector, axis=0)
                    similarities = cosine_similarity(new_fasttext_vectors.reshape(1, -1), abstract_vector)
                    for _, similarity in enumerate(similarities):
                        new_fasttext_recommendations.append((i, similarity[0]))
            
            new_fasttext_recommendations.sort(key=lambda x: x[1], reverse=True)
            new_fasttext_recommendations = new_fasttext_recommendations[:5]
        
            # SciBERT işlemleri
            with open('scibert_vectors.pkl', 'rb') as f:
                abstract_vectors = pickle.load(f)
            abstract_vectors = np.array(abstract_vectors)

            scibert_interest_vectors = [get_scibert_vector(word) for word in interests]
            new_scibert_recommendations = []
            scibert_vectors = []
            scibert_interest_vectors = np.vstack(scibert_interest_vectors)
            
            model_name = 'allenai/scibert_scivocab_uncased'
            tokenizer = AutoTokenizer.from_pretrained(model_name)
            scibert_model = AutoModel.from_pretrained(model_name)
            for text in scibert_recommendations:
                text = pre_process(text)
                abstract = ' '.join(text)
                tokenized_input = tokenizer(abstract, return_tensors='pt', max_length=512, truncation=True, padding='max_length')
                with torch.no_grad():
                    model_output = scibert_model(**tokenized_input)
                embeddings = model_output.last_hidden_state.mean(dim=1).squeeze().numpy()
                scibert_vectors.append(embeddings)
            scibert_vectors = np.array(scibert_vectors)

            if scibert_vectors.shape != scibert_interest_vectors.shape:
                min_shape = min(scibert_vectors.shape[0], scibert_interest_vectors.shape[0])
                scibert_vectors = scibert_vectors[:min_shape, :]
                scibert_interest_vectors = scibert_interest_vectors[:min_shape, :]

            new_scibert_vectors = np.mean(scibert_vectors + scibert_interest_vectors, axis=0)

            for i, abstract_vector in enumerate(abstract_vectors):
                if abstract_vector.any():
                    abstract_vector = np.expand_dims(abstract_vector, axis=0)
                    similarities = cosine_similarity(new_scibert_vectors.reshape(1, -1), abstract_vector)
                    for j, similarity in enumerate(similarities):
                        new_scibert_recommendations.append((i, similarity[0]))

            new_scibert_recommendations.sort(key=lambda x: x[1], reverse=True)
            new_scibert_recommendations = new_scibert_recommendations[:5]

            contents = []
            for idx, similarity in new_fasttext_recommendations:
                recommendation = abstracts[idx]
                content = {}
                upper_case_indices = [i for i, c in enumerate(recommendation) if c.isupper()]
                if len(upper_case_indices) >= 2:
                    title_end_index = upper_case_indices[1]
                    title = recommendation[:title_end_index]
                    recommendation = recommendation[title_end_index:]
                    content["title"] = title
                    content["abstract"] = recommendation
                    content["similarity"] = similarity
                    
                    contents.append(content)
            
            for idx, similarity in new_scibert_recommendations:
                recommendation = abstracts[idx]
                content = {}
                upper_case_indices = [i for i, c in enumerate(recommendation) if c.isupper()]
                if len(upper_case_indices) >= 2:
                    title_end_index = upper_case_indices[1]
                    title = recommendation[:title_end_index]
                    recommendation = recommendation[title_end_index:]
                    content["title"] = title
                    content["abstract"] = recommendation
                    content["similarity"] = similarity

                    contents.append(content)
                    

            true_positive_fasttext = len(fasttext_recommendations)
            true_positive_scibert = len(scibert_recommendations)

            precision_fasttext = true_positive_fasttext / 5
            precision_scibert = true_positive_scibert / 5

            request.session['contents'] = contents
            request.session['precision_fasttext'] = precision_fasttext
            request.session['precision_scibert'] = precision_scibert

            return HttpResponseRedirect(reverse('updated_recommendations'))
        except Exception as e:
            print(e)
            return JsonResponse({'status': 'error', 'message': 'Invalid JSON data.'}, status=400)
    else:
        return JsonResponse({'status': 'error', 'message': 'Invalid request method.'}, status=405)

def updated_recommendations(request):
    contents = request.session.get('contents', [])
    precision_fasttext = request.session.get('precision_fasttext', 0)
    precision_scibert = request.session.get('precision_scibert', 0)

    return render(request, 'updating.html', {'articles': contents, 'fasttext_precision': precision_fasttext, 'scibert_precision': precision_scibert})

@csrf_exempt
def search_view(request):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            search_string = data.get('search_string', '')

            contents = []
            with open('fasttext_vectors.pkl', 'rb') as f:
                fasttext_vectors = pickle.load(f)

            fasttext_model = fasttext.load_model('wiki.en.bin')
            fasttext_search_vectors = [fasttext_model.get_word_vector(search_string) if search_string in fasttext_model.words else []]
            fasttext_search_vectors = np.array(fasttext_search_vectors)

            recommendations = []
            abstract_vectors = np.array(fasttext_vectors)

            for i, abstract_vector in enumerate(abstract_vectors):
                if abstract_vector.any():
                    abstract_vector = np.expand_dims(abstract_vector, axis=0)
                    similarities = cosine_similarity(fasttext_search_vectors, abstract_vector)
                    for j, similarity in enumerate(similarities):
                        recommendations.append((i, similarity[0]))

            recommendations.sort(key=lambda x: x[1], reverse=True)
            fasttext_recommendations = recommendations[:5]

            for idx, similarity in fasttext_recommendations:
                recommendation = abstracts[idx]
                content = {}
                upper_case_indices = [i for i, c in enumerate(recommendation) if c.isupper()]
                if len(upper_case_indices) >= 2:
                    title_end_index = upper_case_indices[1]
                    title = recommendation[:title_end_index]
                    recommendation = recommendation[title_end_index:]
                    content["title"] = title
                    content["abstract"] = recommendation
                    content["similarity"] = similarity
                    
                    contents.append(content)
            
            with open('scibert_vectors.pkl', 'rb') as f:
                scibert_vectors = pickle.load(f)

            scibert_search_vectors = [get_scibert_vector(search_string)]
            scibert_search_vectors = np.vstack(scibert_search_vectors)
            recommendations = []
            abstract_vectors = np.array(scibert_vectors)

            for i, abstract_vector in enumerate(abstract_vectors):
                if abstract_vector.any():
                    abstract_vector = np.expand_dims(abstract_vector, axis=0)
                    similarities = cosine_similarity(scibert_search_vectors, abstract_vector)
                    for j, similarity in enumerate(similarities):
                        recommendations.append((i, similarity[0]))

            recommendations.sort(key=lambda x: x[1], reverse=True)
            scibert_recommendations = recommendations[:5]

            for idx, similarity in scibert_recommendations:
                recommendation = abstracts[idx]
                content = {}
                upper_case_indices = [i for i, c in enumerate(recommendation) if c.isupper()]
                if len(upper_case_indices) >= 2:
                    title_end_index = upper_case_indices[1]
                    title = recommendation[:title_end_index]
                    recommendation = recommendation[title_end_index:]
                    content["title"] = title
                    content["abstract"] = recommendation
                    content["similarity"] = similarity
                    
                    contents.append(content)
            
            return render(request, 'search.html', {'articles': contents})
        
        except json.JSONDecodeError:
            return JsonResponse({'status': 'error', 'message': 'Invalid JSON data.'}, status=400)
        
    else:
        return JsonResponse({'status': 'error', 'message': 'Invalid request method.'}, status=405)
   

def register(request):
    interestList = ["Internet",
                    "Psychology",
                    "Mobile Computing",
                    "Simulation",
                    "Informational Complexity",
                    "Robust Control",
                    "Electronic Commerce",
                    "Computer Science",
                    "Genetic Algorithms",
                    "Informations Systems"]

    return render(request, 'register.html', {'interestList': interestList})

def register_db(request):
    if request.method == 'POST':
        fullname = request.POST.get('fullname')
        email = request.POST.get('email')
        gender = request.POST.get('gender')
        birth_date = request.POST.get('birth_date')
        password = request.POST.get('password')
        confirm_password = request.POST.get('confirm_password')
        interestList = request.POST.getlist('selected_interests')

        if password != confirm_password:
            return HttpResponse("Şifreler uyuşmuyor.")

        user = User.objects.create_user(
            email=email,
            full_name=fullname,
            username=email,
            gender=gender,
            birth_date=birth_date,
            password=password,
            interests=interestList
        )
        user.save()
        
        return redirect('index')

    return render(request, 'register.html')

def login_db(request):
    if request.method == 'POST':
        email = request.POST.get('email')
        password = request.POST.get('password')

        user = authenticate(request=request, username=email, password=password)

        if user is not None:
            login(request, user)
            return HttpResponseRedirect(reverse('main_page'))
        else:
            return HttpResponse("Email veya şifre yanlış.")
    
    else:
        return render(request, 'login.html')
    
def pre_process(text):
    stopwords = set(sw.words('english'))
    stemmer = PorterStemmer()
    text = text.translate(str.maketrans('', '', string.punctuation))
    text = text.lower()
    words = word_tokenize(text)
    cleaned_words = [stemmer.stem(word) for word in words if word not in stopwords and word.isalnum()]
    return cleaned_words

def get_scibert_vector(text):
    model_name = "allenai/scibert_scivocab_uncased"
    tokenizer = AutoTokenizer.from_pretrained(model_name)
    model = AutoModel.from_pretrained(model_name)

    inputs = tokenizer(text, return_tensors="pt", truncation=True, padding=True)
    outputs = model(**inputs)
    return outputs.last_hidden_state.mean(dim=1).detach().numpy() 




from django.urls import path
from . import views

urlpatterns = [
    path('', views.index),
    path('index', views.index),
    path('register-db', views.register_db),
    path('login-db', views.login_db),
    path('register', views.register),
    path('main_page', (views.main_page,)),
    path('updating_recommendations', views.updating_recommendations),
    path('updated_recommendations', views.updated_recommendations),
    path('search_view', views.search_view),
]


from django.contrib import admin
from django.urls import path
from article_app import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.index, name='index'),
    path('login-db/', views.login_db, name='login-db'),
    path('register/', views.register, name='register'),
    path('register-db/', views.register_db, name='register_db'),
    path('main_page/', views.main_page, name='main_page'),
    path('updating_recommendations/', views.updating_recommendations, name='updating_recommendations'),
    path('updated_recommendations/', views.updated_recommendations, name='updated_recommendations'),
    path('search_view/', views.search_view, name='search_view')
]


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Article Abstracts with Checkboxes</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            function getCookie(name) {
                let cookieValue = null;
                if (document.cookie && document.cookie !== '') {
                    const cookies = document.cookie.split(';');
                    for (let i = 0; i < cookies.length; i++) {
                        const cookie = cookies[i].trim();
                        if (cookie.substring(0, name.length + 1) === (name + '=')) {
                            cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                            break;
                        }
                    }
                }
                return cookieValue;
            }

            const csrftoken = getCookie('csrftoken');

            document.getElementById("update-button").addEventListener("click", function (event) {
                event.preventDefault();

                let fasttextRecommendations = [];
                let scibertRecommendations = [];

                document.querySelectorAll('input[type="checkbox"]:checked').forEach(function (checkbox) {
                    let index = parseInt(checkbox.getAttribute("data-index"));
                    let abstractTitle = checkbox.getAttribute("data-abstract");

                    if (index >= 0 && index <= 4) {
                        fasttextRecommendations.push(abstractTitle);
                    } else if (index >= 5 && index <= 9) {
                        scibertRecommendations.push(abstractTitle);
                    }
                });
                const updateUrl = "/updating_recommendations/"; // Updating recommendations view'ını düzgün şekilde belirtin
                fetch(updateUrl, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "X-CSRFToken": csrftoken
                    },
                    body: JSON.stringify({ 
                        fasttext_recommendations: fasttextRecommendations, 
                        scibert_recommendations: scibertRecommendations 
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.text();  // JSON yerine text olarak alıyoruz
                })
                .then(data => {
                    console.log("Success:", data);
                    // Yeni sekme aç ve içeriğini göster
                    const newTab = window.open();
                    newTab.document.write(data);
                    newTab.document.close();
                })
                .catch((error) => {
                    console.error("Error:", error);
                    console.error("Error message:", error.message);
                    console.error("Error stack:", error.stack);
                });
            });

            document.getElementById("search-button").addEventListener("click", function (event) {
                event.preventDefault();

                let searchString = document.getElementById("search-input").value;
                
                let csrftoken = getCookie('csrftoken');

                fetch("/search_view/", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "X-CSRFToken": csrftoken
                    },
                    body: JSON.stringify({ search_string: searchString })
                })
                .then(response => {
                    return response.text();  // Önce cevabı text olarak al
                })
                .then(data => {
                    console.log("Raw response text:", data);  // Yanıtı konsola yazdırın
                    console.log("Search success:", data);
                    const newTab = window.open();
                    newTab.document.write(data);
                    newTab.document.close();
                })
            });
        });
    </script>
</head>
<body class="bg-green-50">
    <div class="container mx-auto px-4 py-8">
        <h1 class="text-3xl font-bold text-green-800 mb-6 text-center">Article Suggestions</h1>

        <div class="flex justify-center mb-6">
            <div class="w-full max-w-2xl flex items-center">
                <input id="search-input" type="text" placeholder="Search articles..." class="flex-grow p-2 border border-green-300 rounded-l-md focus:outline-none focus:border-green-500">
                <button type="button" id="search-button" class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-r-md">
                    <i class="fas fa-search"></i>
                </button>
                <button type="button" id="update-button" class="ml-4 bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded">
                    Önerileri Güncelle
                </button>
            </div>
            <div id="update-message" class="hidden text-green-800 text-center mb-4" fasttext_precision="{{ fasttext_precision }}" scibert_precision="{{ scibert_precision }}">Öneriler Başarıyla Güncellendi</div>
        </div>

        <h2 class="text-2xl font-bold text-green-800 mb-4 text-center">Fasttext Önerileri</h2>

        {% for article in articles %}
            {% if forloop.counter == 6 %}
                <h2 class="text-2xl font-bold text-green-800 mb-4 text-center">Scibert Önerileri</h2>
            {% endif %}
            <div class="bg-white shadow-lg rounded-lg p-6 mb-4">
                <h2 class="text-2xl text-green-700 mb-2">{{ article.title }}</h2>
                <p class="text-gray-600 mb-4">{{ article.abstract }}</p>
                <div class="flex items-center">
                    <span class="mr-2 text-gray-700 font-bold">Similarity: {{ article.similarity }}</span>
                    <br>
                    <input type="checkbox" id="checkbox-{{ forloop.counter }}" class="form-checkbox h-6 w-6 text-green-600" data-abstract="{{ article.abstract }}" data-index="{{ forloop.counter }}">
                    <label for="checkbox-{{ forloop.counter }}" class="ml-2 text-gray-700 font-bold">Makaleyi İşaretle</label>
                </div>
            </div>
        {% endfor %}
    </div>
</body>
</html>

# admin.py
from django.contrib import admin
from .models import User

class UserAdmin(admin.ModelAdmin):
    list_display = ('email', 'full_name', 'gender', 'birth_date', 'username')  # The fields to be displayed in the list view
    search_fields = ('email', 'full_name')  # The fields to be searched in the search box
    list_filter = ('gender',)  # The fields to be used as filters
    ordering = ('email',)  # The default sorting field(s)

    # The fields to be used in updates on admin site. 
    # If you want all fields to be editable, you can remove this line.
    fields = ('email', 'full_name', 'gender', 'birth_date', 'username', 'password', 'interests')

admin.site.register(User, UserAdmin)
admin.site.site_header = "Article Suggestions Admin"
admin.site.site_title = "Article Suggestions Admin Portal"
admin.site.index_title = "Welcome to Article Suggestions Admin Portal"



<!DOCTYPE html>
{% load static %}
<html lang="tr">

<head>
    <meta charset="UTF-8">
    <title>Login</title>
    <meta name="description" content="Login - Register Template">
    <meta name="author" content="Lorenzo Angelino aka MrLolok">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="stylesheet" href="{% static 'main.css' %}">
    <style>
        body {
            background-color: #303641;
        }
    </style>
</head>

<body>
    <div id="container-login">
        <div id="title">
            <i class="material-icons lock">lock</i> Login
        </div>

        <form id="login" action="{% url 'login-db' %}" method="post">
            {% csrf_token %}
            <div class="input">
                <div class="input-addon">
                    <i class="material-icons">email</i>
                </div>
                <input id="email" name="email" placeholder="Email" type="email" required class="validate" autocomplete="off">
            </div>

            <div class="clearfix"></div>

            <div class="input">
                <div class="input-addon">
                    <i class="material-icons">vpn_key</i>
                </div>
                <input id="password" name="password" placeholder="Password" type="password" required class="validate"
                    autocomplete="off">
            </div>
            <br>
            <input type="submit" value="Log In" />
        </form>
        
        <div class="register">
            Don't have an account yet?
            <a href="{% url 'register' %}"><button id="register-link">Register here</button></a>
        </div>
    </div>
</body>

</html>


 <!DOCTYPE html>
{% load static %}
<html lang="tr">

<head>
    <meta charset="UTF-8">
    <title>Register</title>
    <meta name="description" content="Login - Register Template">
    <meta name="author" content="Lorenzo Angelino aka MrLolok">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="{% static 'main.css' %}">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <style>
        body {
            background-color: #303641;
        }
    </style>
</head>

<body>
    <div id="container-register">
        <div id="title">
            <i class="material-icons lock">lock</i> Register
        </div>

        <form id="register" action="{% url 'register_db' %}" method="post">
            {% csrf_token %}

            <div class="input">
                <div class="input-addon">
                    <i class="material-icons">face</i>
                </div>
                <input id="fullname" name="fullname" placeholder="Full Name" type="text" required class="validate" autocomplete="off">
            </div>

            <div class="clearfix"></div>


            <div class="input">
                <div class="input-addon">
                    <i class="material-icons">email</i>
                </div>
                <input id="email" name="email" placeholder="Email" type="email" required class="validate" autocomplete="off">
            </div>

            <div class="clearfix"></div>

            <div class="input">
                <div class="input-addon">
                    <i class="material-icons">wc</i>
                </div>
                <select id="gender" name="gender">
                    <option value="Male">Erkek</option>
                    <option value="Female">Kadın</option>
                    <option value="Other">Diğer</option>
                  </select>
            </div>

            <div class="clearfix"></div>

            <div class="input">
                <div class="input-addon">
                    <i class="material-icons">cake</i>
                </div>
                <input type="date" class="custom-date-input" name="birth_date" id="id_dogum_tarihi" placeholder="Doğum Tarihi">
            </div>

            <div class="clearfix"></div>

            <div class="input">
                <div class="input-addon">
                    <i class="material-icons">label</i>
                </div>
                    <select id="interestSelect">
                        {% for interest in interestList %}
                        <option value="{{ interest|lower }}">{{ interest }}</option>
                        {% endfor %}
                    </select>
            </div>


            <div class="clearfix"></div>

            <br>
            <div>
                <button type="button" id="addInterest">Add Interest</button>
            </div>

            <div class="clearfix"></div>
            
            <div class="input">
                <div class="input-addon">
                    <i class="material-icons">vpn_key</i>
                </div>
                <input id="password" name="password" placeholder="Password" type="password" required class="validate" autocomplete="off">
            </div>

            <div class="clearfix"></div>

            <div class="input">
                <div class="input-addon">
                    <i class="material-icons">vpn_key</i>
                </div>
                <input id="confirm_password" name="confirm_password" placeholder="Confirm Password" type="password" required class="validate" autocomplete="off">
            </div>
            <br>
            <input type="submit" value="Register" />

            <input type="hidden" id="selectedInterests" name="selected_interests" value="">
        </form>


        <div class="register">
            Do you already have an account?
            <a href="{% url 'index' %}"><button id="register-link">Log In here</button></a>
        </div>
    </div>
</body>

</html>

<script>
    document.addEventListener("DOMContentLoaded", function(){
        var selectedInterests = [];

        document.getElementById("addInterest").addEventListener("click", function() {
            var selectElement = document.getElementById("interestSelect");
            var selectedIndex = selectElement.selectedIndex;
            if (selectedIndex >= 0) {
                var selectedValue = selectElement.options[selectedIndex].value;
                selectedInterests.push(selectedValue);
                console.log("Selected interests: ", selectedInterests);


                selectElement.remove(selectedIndex);

                document.getElementById("selectedInterests").value = JSON.stringify(selectedInterests);
            }
               
        })
    })
</script>
